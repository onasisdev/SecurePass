// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurePass.Infraestructure.Data;

#nullable disable

namespace SecurePass.Infrastructure.Migrations
{
    [DbContext(typeof(SecurePassApplicationContext))]
    partial class SecurePassApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurePass.Domain.Entities.DigitalSecurityTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DigitalSecurityTipCategoryId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("GoodPractice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DigitalSecurityTipCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("DigitalSecurityTips");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.DigitalSecurityTipCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DigitalSecurityTipCategories");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.PasswordGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IncludeLowerCaseLetter")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeSpecialCharacter")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeUpperCaseLetter")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordLength")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PasswordGenerations");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.PasswordStrengthEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PasswordGenerationId")
                        .HasColumnType("int");

                    b.Property<string>("StrengthLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("SuggestionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PasswordGenerationId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordStrengthEvaluations");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.DigitalSecurityTip", b =>
                {
                    b.HasOne("SecurePass.Domain.Entities.DigitalSecurityTipCategory", "DigitalSecurityTipCategory")
                        .WithMany("DigitalSecurityTips")
                        .HasForeignKey("DigitalSecurityTipCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurePass.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalSecurityTipCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.PasswordGeneration", b =>
                {
                    b.HasOne("SecurePass.Domain.Entities.User", "User")
                        .WithOne("PasswordGeneration")
                        .HasForeignKey("SecurePass.Domain.Entities.PasswordGeneration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.PasswordStrengthEvaluation", b =>
                {
                    b.HasOne("SecurePass.Domain.Entities.PasswordGeneration", "PasswordGeneration")
                        .WithMany("PasswordStrengthEvaluations")
                        .HasForeignKey("PasswordGenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurePass.Domain.Entities.User", "User")
                        .WithMany("PasswordStrengthEvaluations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PasswordGeneration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.DigitalSecurityTipCategory", b =>
                {
                    b.Navigation("DigitalSecurityTips");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.PasswordGeneration", b =>
                {
                    b.Navigation("PasswordStrengthEvaluations");
                });

            modelBuilder.Entity("SecurePass.Domain.Entities.User", b =>
                {
                    b.Navigation("PasswordGeneration")
                        .IsRequired();

                    b.Navigation("PasswordStrengthEvaluations");
                });
#pragma warning restore 612, 618
        }
    }
}
